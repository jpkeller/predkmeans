// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// loglikeCpp
double loglikeCpp(arma::mat X, arma::mat b, arma::mat y, int n);
RcppExport SEXP _predkmeans_loglikeCpp(SEXP XSEXP, SEXP bSEXP, SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikeCpp(X, b, y, n));
    return rcpp_result_gen;
END_RCPP
}
// gradientMultinomialCpp
arma::mat gradientMultinomialCpp(arma::mat X, arma::mat b, arma::mat y, int k);
RcppExport SEXP _predkmeans_gradientMultinomialCpp(SEXP XSEXP, SEXP bSEXP, SEXP ySEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(gradientMultinomialCpp(X, b, y, k));
    return rcpp_result_gen;
END_RCPP
}
// hessianMultinomialCpp
arma::mat hessianMultinomialCpp(arma::mat X, arma::mat b, arma::mat y, int p, int k);
RcppExport SEXP _predkmeans_hessianMultinomialCpp(SEXP XSEXP, SEXP bSEXP, SEXP ySEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(hessianMultinomialCpp(X, b, y, p, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_predkmeans_loglikeCpp", (DL_FUNC) &_predkmeans_loglikeCpp, 4},
    {"_predkmeans_gradientMultinomialCpp", (DL_FUNC) &_predkmeans_gradientMultinomialCpp, 4},
    {"_predkmeans_hessianMultinomialCpp", (DL_FUNC) &_predkmeans_hessianMultinomialCpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_predkmeans(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
